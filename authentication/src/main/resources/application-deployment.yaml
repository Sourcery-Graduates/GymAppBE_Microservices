spring:
  application:
    name: Gym App Auth Service
  config:
    activate:
      on-profile: deployment

  datasource:
    url: jdbc:postgresql://postgres:5432/gym_app_db
    username: gym_app_user
    password: gym_app_pass
    hikari:
      auto-commit: false

  liquibase:
    change-log: classpath:/db/changelog/db.changelog-master.yaml
    liquibase-schema: public

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    open-in-view: false

  springdoc:
    api-docs:
      path: /api-docs
    swagger-ui:
      path: /swagger-ui.html

  management:
    endpoints:
      web:
        exposure:
          include: health

  kafka:
    replicas: 1
    partitions: 1
    consumer:
      bootstrap-servers: kafka1:9092
      key-deserializer: org.apache.kafka.common.serialization.UUIDDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: gym-app-listener-group
    producer:
      bootstrap-servers: kafka1:9092
      key-serializer: org.apache.kafka.common.serialization.UUIDSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    topics:
      user-reminder: "authentication.user-reminder"
      account-register: "userProfile.create-account"
      likes-events: "workout.like-events"
      likes-notifications: "userProfile.notifications-likes-dislikes"
      last-user-workout: "workout.last-user-workout"
      email-send: "email.send-email"
      email-retry: "email.email-retry"

frontend:
  base_url: "https://app.workout-app.online"
  registration_verification_path: "/registerVerification?token="
  password_reset_path: "/passwordReset?token="

#TODO: add actual url here
app:
  base_url: "https://replace.this.example.com"

google:
  client-id: ${GOOGLE_OAUTH2_CLIENT_ID}
  client-secret: ${GOOGLE_OAUTH2_CLIENT_SECRET}

logging:
  level:
    kafka: WARN
    org.springframework.kafka: WARN
    org.apache.kafka: WARN
    org.apache.kafka.clients: WARN